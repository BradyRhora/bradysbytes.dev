// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// PAF

model User {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  performances UserPerformance[]
}

model UserPerformance {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  scheduleIndex Int
  schedule      Schedule  @relation(fields: [scheduleIndex], references: [id])
  skipsUsed     Int      @default(0)
  success       Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model Song {
  id              String     @id @default(uuid())
  title           String
  artist          String
  duration        Float
  filePath        String
  date            DateTime?
  scheduleIndices Schedule[]
  addedAt         DateTime   @default(now())
}

model PaFConfig {
  id              Int      @id @default(0)
  currentDate     DateTime?
  songIndex       Int      @default(-1)
  todaysStartTime Int      @default(0)
}

model Schedule {
  id           Int    @id
  songId       String
  song         Song   @relation(fields: [songId], references: [id])
  performances UserPerformance[]
}

// SBPS

model SBPSCharacter {
  id           String   @id @default(uuid())
  name         String
  range        Float
  weight       Float
  power        Float
  speed        Float
  weapon_size  Float?
  sex_appeal   Float
  style        Float
  colour       String
  blurb        String
  series       SBPSSeries   @relation(fields: [seriesId], references: [id])
  seriesId     String
  mainFor      SBPSPlayer[]  @relation("main")
  secondaryFor SBPSPlayer[]  @relation("secondary")
}

model SBPSSeries {
  id           String   @id @default(uuid())
  name         String
  releaseYear  Int
  genre        String
  characters   SBPSCharacter[]
}

model SBPSPlayer {
  id           String   @id @default(uuid())
  tag          String
  name         String
  main         SBPSCharacter @relation(name: "main", fields: [mainId], references: [id])
  mainId       String
  secondary    SBPSCharacter? @relation(name: "secondary", fields: [secondaryId], references: [id])
  secondaryId  String?
  weight       Float
  charm        Float
  anger        Float
  depression   Float
  intoxication Float
  fingerCount  Int    @default(10)
  coordination Float
  intelligence Float
  techSkill    Float
  stink        Float

  tournaments  SBPSTournamentEntry[]
  matches      SBPSTournamentMatch[] @relation("player1")
  matches2     SBPSTournamentMatch[] @relation("player2")
  wonMatches   SBPSTournamentMatch[] @relation("winner")
}

model SBPSTournament {
  id           String   @id @default(uuid())
  name         String
  startDate    DateTime
  active       Boolean  @default(true)
  participants SBPSTournamentEntry[]
  matches      SBPSTournamentMatch[]
}

model SBPSTournamentEntry {
  id          String   @id @default(uuid())
  tournament  SBPSTournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  player      SBPSPlayer @relation(fields: [playerId], references: [id])
  playerId    String
  rank        Int?
}

model SBPSTournamentMatch {
  id           String   @id @default(uuid())
  tournament   SBPSTournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  round        Int
  number      Int @default(0) // Match number within the round, used for sorting

  // Should these reference SBPSTournamentEntry instead?
  player1      SBPSPlayer? @relation(name: "player1", fields: [player1Id], references: [id])
  player1Id    String?
  player2      SBPSPlayer? @relation(name: "player2", fields: [player2Id], references: [id])
  player2Id    String?
  
  winner       SBPSPlayer? @relation(name: "winner", fields: [winnerId], references: [id])
  winnerId     String?
  score1       Int  @default(0)
  score2       Int  @default(0)

  previousMatch1 SBPSTournamentMatch? @relation(name: "previousMatch1", fields: [previousMatch1Id], references: [id])
  previousMatch1Id String? @unique
  previousMatch2 SBPSTournamentMatch? @relation(name: "previousMatch2", fields: [previousMatch2Id], references: [id])
  previousMatch2Id String? @unique
  nextMatch SBPSTournamentMatch? @relation(name: "nextMatch", fields: [nextMatchId], references: [id])
  nextMatchId String?

  nextMatchRel SBPSTournamentMatch[] @relation(name: "nextMatch")
  previousMatch1Rel SBPSTournamentMatch? @relation(name: "previousMatch1")
  previousMatch2Rel SBPSTournamentMatch? @relation(name: "previousMatch2")
  games SBPSGame[]
}

model SBPSGame {
  id            String   @id @default(uuid())
  number        Int

  player1Damage Int @default(0)
  player2Damage Int @default(0)
  player1Stocks Int @default(3)
  player2Stocks Int @default(3)
  player1State  String @default("spawning") // see app/scripts/server/sbps/match.ts for different states
  player2State  String @default("spawning")

  steps         Int @default(0) // How many "updates" have occurred

  match         SBPSTournamentMatch @relation(fields: [matchId], references: [id])
  matchId       String

  logs          SBPSGameLog[]
}

model SBPSGameLog {
  id         String   @id @default(uuid())
  index      Int
  game       SBPSGame  @relation(fields: [gameId], references: [id])
  gameId     String
  timestamp  DateTime @default(now())
  content    String

}